generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model doc_contributors {
  doc_id              String
  github_id           BigInt
  contributions       Int      @default(1)
  last_contributed_at DateTime @default(now()) @db.Timestamptz(6)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @updatedAt @db.Timestamptz(6)

  docs docs @relation(fields: [doc_id], references: [id], onDelete: Cascade)

  @@id([doc_id, github_id])
  @@index([doc_id])
  @@index([github_id]) // 便于反查某用户在哪些文档有贡献
}

model docs {
  id           String   @id
  path_current String?
  title        String?
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @updatedAt @db.Timestamptz(6)

  doc_contributors doc_contributors[]

  /// 作为聚合缓存使用：{"github_id": contributions}
  /// 兼容性最好用 dbgenerated 设置 PG 端默认 '{}'
  contributor_stats Json?       @default(dbgenerated("'{}'::jsonb")) @db.JsonB
  doc_paths         doc_paths[]
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model users {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  email         String?   @db.VarChar(255)
  emailVerified DateTime? @db.Timestamptz(6)
  image         String?
  comments      comments[]
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}

model doc_paths {
  doc_id     String
  path       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  docs docs @relation(fields: [doc_id], references: [id], onDelete: Cascade)

  @@id([doc_id, path])
  @@index([path])
}

model comments {
  id         Int      @id @default(autoincrement())
  doc_id     String
  user_id    Int
  content    String   @db.Text
  parent_id  Int?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  user   users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent comments? @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: Cascade)
  replies comments[] @relation("CommentReplies")

  @@index([doc_id])
  @@index([user_id])
  @@index([parent_id])
}
